// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @db.Text
// Further reading: 
// https://next-auth.js.org/schemas/models
// https://authjs.dev/getting-started/adapters/prisma

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String?   @default("HOST")
  accounts      Account[]
  sessions      Session[]
  vendors       Vendor[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Application Models

enum ExpenseLevel {
  INEXPENSIVE     // $
  AFFORDABLE      // $$
  MODERATE        // $$$
  LUXURY          // $$$$
}

enum EventType {
  WEDDING
  CORPORATE
  BIRTHDAY
  BABY_SHOWER
  ANNIVERSARY
  GRADUATION
  RETIREMENT
  ENGAGEMENT
  REUNION
  CONFERENCE
  OTHER
}

model Vendor {
  id                 String       @id @default(cuid())
  businessName       String       @map("business_name")
  location           String
  pincode            String
  bio                String?      @db.Text
  websiteUrl         String?      @map("website_url")
  profilePictureUrl  String?      @map("profile_picture_url")
  userId             String       @map("user_id")
  isApproved         Boolean      @default(false) @map("is_approved")
  isPublished        Boolean      @default(false) @map("is_published")
  expenseLevel       ExpenseLevel @map("expense_level")
  createdAt          DateTime     @default(now()) @map("created_at")
  updatedAt          DateTime     @updatedAt @map("updated_at")

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services Service[]

  @@map("vendors")
}

model Service {
  id          String    @id @default(cuid())
  name        String
  vendorId    String    @map("vendor_id")
  eventType   EventType @map("event_type")
  available   Boolean   @default(true)
  metadata    Json?     // Store event-specific metadata
  cost        Decimal   @db.Decimal(10, 2)
  images      Json?     // Store array of image URLs as JSON
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  vendor Vendor @relation(fields: [vendorId], references: [id], onDelete: Cascade)

  @@map("services")
}
